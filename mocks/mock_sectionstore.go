// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/psewda/typing/pkg/storage/sectionstore (interfaces: Sectionstore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	sectionstore "github.com/psewda/typing/pkg/storage/sectionstore"
	reflect "reflect"
)

// MockSectionstore is a mock of Sectionstore interface
type MockSectionstore struct {
	ctrl     *gomock.Controller
	recorder *MockSectionstoreMockRecorder
}

// MockSectionstoreMockRecorder is the mock recorder for MockSectionstore
type MockSectionstoreMockRecorder struct {
	mock *MockSectionstore
}

// NewMockSectionstore creates a new mock instance
func NewMockSectionstore(ctrl *gomock.Controller) *MockSectionstore {
	mock := &MockSectionstore{ctrl: ctrl}
	mock.recorder = &MockSectionstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSectionstore) EXPECT() *MockSectionstoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockSectionstore) Create(arg0 string, arg1 *sectionstore.WritableSection) (*sectionstore.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*sectionstore.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockSectionstoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSectionstore)(nil).Create), arg0, arg1)
}

// Delete mocks base method
func (m *MockSectionstore) Delete(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockSectionstoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSectionstore)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockSectionstore) Get(arg0, arg1 string) (*sectionstore.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*sectionstore.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSectionstoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSectionstore)(nil).Get), arg0, arg1)
}

// GetAll mocks base method
func (m *MockSectionstore) GetAll(arg0 string) ([]*sectionstore.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]*sectionstore.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockSectionstoreMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSectionstore)(nil).GetAll), arg0)
}

// Update mocks base method
func (m *MockSectionstore) Update(arg0, arg1 string, arg2 *sectionstore.WritableSection) (*sectionstore.Section, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sectionstore.Section)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockSectionstoreMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSectionstore)(nil).Update), arg0, arg1, arg2)
}
