// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/psewda/typing/pkg/storage/notestore (interfaces: Notestore)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	notestore "github.com/psewda/typing/pkg/storage/notestore"
	reflect "reflect"
)

// MockNotestore is a mock of Notestore interface
type MockNotestore struct {
	ctrl     *gomock.Controller
	recorder *MockNotestoreMockRecorder
}

// MockNotestoreMockRecorder is the mock recorder for MockNotestore
type MockNotestoreMockRecorder struct {
	mock *MockNotestore
}

// NewMockNotestore creates a new mock instance
func NewMockNotestore(ctrl *gomock.Controller) *MockNotestore {
	mock := &MockNotestore{ctrl: ctrl}
	mock.recorder = &MockNotestoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotestore) EXPECT() *MockNotestoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockNotestore) Create(arg0 *notestore.WritableNote) (*notestore.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*notestore.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockNotestoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotestore)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockNotestore) Delete(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockNotestoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNotestore)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockNotestore) Get(arg0 string) (*notestore.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*notestore.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockNotestoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNotestore)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockNotestore) GetAll() ([]*notestore.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*notestore.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockNotestoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNotestore)(nil).GetAll))
}

// Update mocks base method
func (m *MockNotestore) Update(arg0 string, arg1 *notestore.WritableNote) (*notestore.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*notestore.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockNotestoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNotestore)(nil).Update), arg0, arg1)
}
